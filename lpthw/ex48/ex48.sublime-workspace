{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"the",
				"the"
			],
			[
				"parse_",
				"parse_object	function"
			],
			[
				"a",
				"a"
			],
			[
				"nxt",
				"nxt	statement"
			],
			[
				"i",
				"i	param"
			]
		]
	},
	"buffers":
	[
		{
			"file": "setup.py",
			"settings":
			{
				"buffer_size": 396,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from nose.tools import *\nfrom ex48 import lexicon\n\n\ndef test_directions():\n    assert_equal(lexicon.scan(\"north\"), [('direction', 'north')])\n    result = lexicon.scan(\"north south east\")\n    assert_equal(result, [('direction', 'north'),\n                          ('direction', 'south'),\n                          ('direction', 'east')])\n\n\ndef test_verbs():\n    assert_equal(lexicon.scan(\"go\"), [('verb', 'go')])\n    result = lexicon.scan(\"go kill eat\")\n    assert_equal(result, [('verb', 'go'),\n                          ('verb', 'kill'),\n                          ('verb', 'eat')])\n\n\ndef test_stops():\n    assert_equal(lexicon.scan(\"the\"), [('stop', 'the')])\n    result = lexicon.scan(\"the in of\")\n    assert_equal(result, [('stop', 'the'),\n                          ('stop', 'in'),\n                          ('stop', 'of')])\n\n\ndef test_nouns():\n    assert_equal(lexicon.scan(\"bear\"), [('noun', 'bear')])\n    result = lexicon.scan(\"bear princess\")\n    assert_equal(result, [('noun', 'bear'),\n                          ('noun', 'princess')])\n\n\ndef test_numbers():\n    assert_equal(lexicon.scan(\"1234\"), [('number', 1234)])\n    result = lexicon.scan(\"3 91234\")\n    assert_equal(result, [('number', 3),\n                          ('number', 91234)])\n\n\ndef test_errors():\n    assert_equal(lexicon.scan(\"ASDFADFASDF\"), [('error', 'asdfadfasdf')])\n    result = lexicon.scan(\"bear IAS princess\")\n    assert_equal(result, [('noun', 'bear'),\n                          ('error', 'ias'),\n                          ('noun', 'princess')])\n",
			"file": "tests/ex48_tests.py",
			"file_size": 1574,
			"file_write_time": 130863276530596096,
			"settings":
			{
				"buffer_size": 1526,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from nose.tools import *\nfrom ex48 import parser\nfrom ex48 import lexicon\n\n\ndef test_peek():\n    sentence = lexicon.scan(\"eat all the things\")\n    assert_equal(parser.peek(sentence), \"verb\")\n    assert_equal(parser.peek([]), None)\n\n\ndef test_match():\n    # test successful returning case\n    sentence = [('verb', 'go')]\n    assert_equal(parser.match(sentence, 'verb'), ('verb', 'go'))\n\n    # test with an incorrect expected case\n    sentence = lexicon.scan(\"north and beyond the wall\")\n    assert_equal(parser.match(sentence, 'noun'), None)\n\n    # test with passing an empty list\n    assert_equal(parser.match([], 'direction'), None)\n\n\ndef test_skip():\n    # test a standard use case\n    sentence = lexicon.scan(\"the the in of go the\")\n    parser.skip(sentence, 'stop')\n    assert_equal(sentence, [('verb', 'go'), ('stop', 'the')])\n\n    # a case where nothing should happen\n    sentence = lexicon.scan(\"the the in of go the\")\n    result = lexicon.scan(\"the the in of go the\")\n    parser.skip(sentence, 'verb')\n    assert_equal(sentence, result)\n\n\ndef test_parse_verb():\n    sentence = lexicon.scan(\"go\")\n    assert_equal(parser.parse_verb(sentence), ('verb', 'go'))\n\n    sentence = lexicon.scan(\"the in eat\")\n    assert_equal(parser.parse_verb(sentence), ('verb', 'eat'))\n\n    sentence = lexicon.scan(\"cheese\")\n    with assert_raises(parser.ParserError):\n        parser.parse_verb(sentence)\n\n\ndef test_parse_subject():\n    sentence = lexicon.scan(\"bear\")\n    assert_equal(parser.parse_subject(sentence), ('noun', 'bear'))\n\n    sentence = lexicon.scan(\"in in from the go\")\n    assert_equal(parser.parse_subject(sentence), ('noun', 'player'))\n\n    with assert_raises(parser.ParserError):\n        sentence = lexicon.scan(\"oh poop\")\n        parser.parse_subject(sentence)\n\n\ndef test_parse_object():\n    sentence = lexicon.scan(\"door\")\n    assert_equal(parser.parse_object(sentence), ('noun', 'door'))\n\n    sentence = lexicon.scan(\"in the bear\")\n    assert_equal(parser.parse_object(sentence), ('noun', 'bear'))\n\n    sentence = lexicon.scan(\"in the the north bear\")\n    assert_equal(parser.parse_object(sentence), ('direction', 'north'))\n\n    sentence = lexicon.scan(\"for the go bear\")\n    with assert_raises(parser.ParserError):\n        parser.parse_object(sentence)\n\n\ndef test_parse_sentence():\n    sentence = lexicon.scan(\"go in the door\")\n    sentence = parser.parse_sentence(sentence)\n    result = parser.Sentence(('noun', 'player'),\n                             ('verb', 'go'),\n                             ('noun', 'door'))\n    assert_equal(sentence.subject, result.subject)\n    assert_equal(sentence.verb, result.verb)\n    assert_equal(sentence.obj, result.obj)\n\n    with assert_raises(parser.ParserError):\n        sentence = lexicon.scan(\"go eat the player\")\n        parser.parse_sentence(sentence)\n",
			"file": "tests/parser_tests.py",
			"file_size": 2892,
			"file_write_time": 130864557027174772,
			"settings":
			{
				"buffer_size": 2803,
				"line_ending": "Windows"
			}
		},
		{
			"file": "ex48/lexicon.py",
			"settings":
			{
				"buffer_size": 1000,
				"line_ending": "Windows"
			}
		},
		{
			"file": "ex48/parser.py",
			"settings":
			{
				"buffer_size": 1606,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 196.0,
		"last_filter": "git commit",
		"selected_items":
		[
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git commi",
				"Git: Commit"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"git log",
				"Git: Log All"
			],
			[
				"usage",
				"Anaconda: Find object usage"
			],
			[
				"",
				"Anaconda: Goto object definition"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"fold",
				"Fold Python : go to import"
			],
			[
				"goot",
				"Anaconda: Goto object definition"
			],
			[
				"goto",
				"Anaconda: Goto object definition"
			],
			[
				"anaconda",
				"Anaconda: Find object usage"
			],
			[
				"python",
				"Anaconda: Set Python interpreter"
			],
			[
				"log",
				"Git: Log All"
			],
			[
				"branch",
				"Git: New Branch"
			],
			[
				"check",
				"Git: Checkout Tag"
			],
			[
				"git",
				"Set Syntax: Git Graph"
			],
			[
				"instea",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			" import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Collin McLean/Dropbox/Programming/lpthw/ex48",
		"/C/Users/Collin McLean/Dropbox/Programming/lpthw/ex48/tests"
	],
	"file_history":
	[
		"/C/Users/Collin McLean/Dropbox/Programming/timecard/cmm_learning.tc",
		"/C/Users/Collin McLean/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Collin McLean/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Collin McLean/Dropbox/Programming/lpthw/ex48/ex48/lexicon.py",
		"/C/Users/Collin McLean/Dropbox/Programming/lpthw/ex48/tests/NAME_tests.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/ui.txt",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/sail.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/ui.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/event.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/main.py",
		"/C/Users/Wingedillidan/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Wingedillidan/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/new_file.py"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sentence",
			"target",
			"=None",
			"df",
			"word in",
			"word",
			"#",
			"display",
			"()\n",
			"setnxt",
			"space",
			"nxt",
			"_ds",
			"next",
			"name",
			"i",
			"len",
			"white",
			"whitespace",
			"msg_invalid",
			"\n            ",
			"            ",
			"x1",
			"fuel",
			"hp",
			"fuel",
			"self.hp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "setup.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 396,
						"regions":
						{
						},
						"selection":
						[
							[
								377,
								377
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tests/ex48_tests.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1526,
						"regions":
						{
						},
						"selection":
						[
							[
								293,
								293
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tests/parser_tests.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2803,
						"regions":
						{
						},
						"selection":
						[
							[
								1562,
								1562
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 380.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "ex48/lexicon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1000,
						"regions":
						{
						},
						"selection":
						[
							[
								428,
								428
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ex48/parser.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1606,
						"regions":
						{
						},
						"selection":
						[
							[
								1178,
								1178
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 598.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 130.0
	},
	"pinned_build_system": "",
	"project": "ex48.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lex",
				"ex48\\lexicon.py"
			],
			[
				"",
				"tests\\ex48_tests.py"
			],
			[
				"name",
				"tests\\NAME_tests.py"
			],
			[
				"set",
				"setup.py"
			],
			[
				"ui.p",
				"ui.py"
			],
			[
				"ui",
				"ui.txt"
			],
			[
				"sail",
				"sail.py"
			],
			[
				"event",
				"event.py"
			],
			[
				"ui.t",
				"ui.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 73.0,
		"last_filter": "ship",
		"selected_items":
		[
			[
				"ship",
				"Ship"
			],
			[
				"change",
				"change"
			]
		],
		"width": 490.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 188.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
